name: Pull request

on:
  pull_request:
    # we'll also run this when pull requests to develop are opened
    branches: [ develop, test/*, feature/*, docs/*, bug/*, task/* , improvement/*, "master", "main"]
jobs:

   build:
  
    # The type of runner that the job will run on
    runs-on: windows-latest 
    env:
      SOLNAME: ZoidbergAI.Addin
      SOLSLN: ZoidbergAI.Addin.sln
      SOLDLL: ZoidbergAI.Addin.dll
      INSTALLER_SETUP_FILE_PATH: Installer\InstallScript.iss
      SETUP_EXE_PATH: Installer\Installer\ZoidbergAI.Addin.exe
      CERTIFICATE_URL: "https://i2fy7wt5qd.execute-api.us-east-1.amazonaws.com/dev/everse"
      CERTIFICATE_KEY: ${{ secrets.EVERSE_AWS_S3_CERTIFICATE_KEY_ID }}
      CERTIFICATE_PASSWORD: ${{ secrets.EVERSE_CERTIFICATE_KEY }}
    outputs:
      Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }} 
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}   
     
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    # Installing the MSBuild
    - name: Setup MSBuild Path
      uses: microsoft/setup-msbuild@v1.1
    
    # Install and restore the necessary NuGet packages
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6
     
    - name: Restore NuGet Packages
      run: nuget restore ${{ env.SOLSLN }}
      
    # Change the version inside of the 'InstallScript.iss' file
    - name: Setting new version to the 'InstallScript.iss' file
      run: (Get-Content ${{ env.INSTALLER_SETUP_FILE_PATH }}) -replace 'AppVersion=1.0.0', 'AppVersion=v${{ steps.gitversion.outputs.majorMinorPatch }}' | Out-File -encoding ASCII ${{ env.INSTALLER_SETUP_FILE_PATH }}

    - name: Get certificate
      run: |
        $url = ${{ env.CERTIFICATE_URL }}
        $outputFilePath = "credentials.pfx"
        $apiKey = "${{ env.CERTIFICATE_KEY }}"
        
        $headers = @{
            "x-api-key" = $apiKey
        }

        Invoke-RestMethod -Uri $url -Headers $headers -OutFile $outputFilePath
        
    # Build the solution on the Release mode
    - name: Build and Publish App
      run: msbuild ${{ env.SOLSLN }} /t:Clean,Build /p:platform="Any CPU" /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=FolderProfile

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: installer
        path: "${{ env.SETUP_EXE_PATH }}"
        retention-days: 5
